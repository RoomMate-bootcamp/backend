import logging
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from bot.states.profile_states import ProfileStates
from bot.keyboards.profile_kb import get_profile_keyboard, get_gender_keyboard, get_interests_keyboard, \
    get_accommodation_keyboard
from bot.keyboards.main_kb import get_main_menu_keyboard
from src.core.database import User, postgres_helper

router = Router()
logger = logging.getLogger(__name__)


async def show_profile(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    user_id = user_data.get("user_id")

    if not user_id:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
        return

    async with postgres_helper.session_factory() as session:
        user = await session.get(User, user_id)

        if not user:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.")
            return

        accommodation_map = {
            "apartment": "–ö–≤–∞—Ä—Ç–∏—Ä–∞",
            "dormitory": "–û–±—â–µ–∂–∏—Ç–∏–µ",
            "no_preference": "–ù–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è"
        }

        accommodation_text = accommodation_map.get(user.accommodation_preference, "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

        profile_text = (
            f"üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n"
            f"*–ò–º—è:* {user.name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"*–í–æ–∑—Ä–∞—Å—Ç:* {user.age or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"*–ü–æ–ª:* {user.gender or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"*–ü—Ä–æ—Ñ–µ—Å—Å–∏—è:* {user.occupation or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"

            f"*üìö –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:*\n"
            f"*–í–£–ó/–ì–æ—Ä–æ–¥ —É—á–µ–±—ã:* {user.study_location or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"*–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:* {user.study_program or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"

            f"*üè† –ñ–∏–ª–∏—â–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:*\n"
            f"*–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –ø–æ –∂–∏–ª—å—é:* {accommodation_text}\n"
            f"*–ë—é–¥–∂–µ—Ç –Ω–∞ –∞—Ä–µ–Ω–¥—É:* {user.rent_budget or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} ‚ÇΩ\n"
            f"*–†–∞–π–æ–Ω –ø–æ–∏—Å–∫–∞:* {user.location or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"

            f"*‚öôÔ∏è –õ–∏—á–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏:*\n"
            f"*–£—Ä–æ–≤–µ–Ω—å —á–∏—Å—Ç–æ–ø–ª–æ—Ç–Ω–æ—Å—Ç–∏:* {user.cleanliness_level or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}/5\n"
            f"*–†–µ–∂–∏–º —Å–Ω–∞:* {user.sleep_habits or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"*–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –∫—É—Ä–µ–Ω–∏—é:* {user.smoking_preference or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"*–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –∂–∏–≤–æ—Ç–Ω—ã–º:* {user.pet_preference or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"

            f"*Telegram username:* {user.telegram_username or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"

            f"*–û —Å–µ–±–µ:*\n{user.bio or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
            f"*–ò–Ω—Ç–µ—Ä–µ—Å—ã:*\n{', '.join(user.interests or ['–ù–µ —É–∫–∞–∑–∞–Ω–æ'])}"
        )

        await message.answer(profile_text, parse_mode="Markdown", reply_markup=get_profile_keyboard())


async def edit_profile_callback(callback: types.CallbackQuery, state: FSMContext):
    field = callback.data.split("_")[1]

    field_prompts = {
        "name": "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        "age": "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ):",
        "gender": "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
        "occupation": "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ—Ñ–µ—Å—Å–∏—é:",
        "bio": "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ:",
        "interests": "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã:",
        "cleanliness": "–û—Ü–µ–Ω–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –≤–∞—à–µ–π —á–∏—Å—Ç–æ–ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –æ—Ç 1 –¥–æ 5:",
        "sleep": "–û–ø–∏—à–∏—Ç–µ –≤–∞—à —Ä–µ–∂–∏–º —Å–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∂–∞–≤–æ—Ä–æ–Ω–æ–∫', '—Å–æ–≤–∞'):",
        "budget": "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç –Ω–∞ –∞—Ä–µ–Ω–¥—É (—á–∏—Å–ª–æ –≤ —Ä—É–±–ª—è—Ö):",
        "location": "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω –ø–æ–∏—Å–∫–∞:",
        "smoking": "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –∫—É—Ä–µ–Ω–∏—é:",
        "pets": "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –¥–æ–º–∞—à–Ω–∏–º –∂–∏–≤–æ—Ç–Ω—ã–º:",
        "study_location": "–£–∫–∞–∂–∏—Ç–µ –í–£–ó –∏–ª–∏ –≥–æ—Ä–æ–¥, –≥–¥–µ –≤—ã —É—á–∏—Ç–µ—Å—å/–ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —É—á–∏—Ç—å—Å—è:",
        "study_program": "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è:",
        "accommodation": "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∂–∏–ª—å—è:",
        "telegram_username": "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à username –≤ Telegram (–±–µ–∑ @):"
    }

    field_states = {
        "name": ProfileStates.edit_name,
        "age": ProfileStates.edit_age,
        "gender": ProfileStates.edit_gender,
        "occupation": ProfileStates.edit_occupation,
        "bio": ProfileStates.edit_bio,
        "interests": ProfileStates.edit_interests,
        "cleanliness": ProfileStates.edit_cleanliness,
        "sleep": ProfileStates.edit_sleep,
        "budget": ProfileStates.edit_budget,
        "location": ProfileStates.edit_location,
        "smoking": ProfileStates.edit_smoking,
        "pets": ProfileStates.edit_pets,
        "study_location": ProfileStates.edit_study_location,
        "study_program": ProfileStates.edit_study_program,
        "accommodation": ProfileStates.edit_accommodation,
        "telegram_username": ProfileStates.edit_telegram_username
    }

    await state.update_data(edit_field=field)

    if field == "gender":
        await callback.message.answer(field_prompts[field], reply_markup=get_gender_keyboard())
    elif field == "interests":
        user_data = await state.get_data()
        user_id = user_data.get("user_id")

        async with postgres_helper.session_factory() as session:
            user = await session.get(User, user_id)
            current_interests = user.interests or []

        await callback.message.answer(field_prompts[field], reply_markup=get_interests_keyboard(current_interests))
        await state.update_data(selected_interests=current_interests)
    elif field == "accommodation":
        await callback.message.answer(field_prompts[field], reply_markup=get_accommodation_keyboard())
    else:
        await callback.message.answer(field_prompts[field])

    await state.set_state(field_states[field])
    await callback.answer()


async def process_profile_edit(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    user_id = user_data.get("user_id")

    if not user_id:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
        return

    current_state = await state.get_state()
    value = message.text

    field_mapping = {
        "ProfileStates:edit_name": "name",
        "ProfileStates:edit_age": "age",
        "ProfileStates:edit_gender": "gender",
        "ProfileStates:edit_occupation": "occupation",
        "ProfileStates:edit_bio": "bio",
        "ProfileStates:edit_cleanliness": "cleanliness_level",
        "ProfileStates:edit_sleep": "sleep_habits",
        "ProfileStates:edit_budget": "rent_budget",
        "ProfileStates:edit_location": "location",
        "ProfileStates:edit_smoking": "smoking_preference",
        "ProfileStates:edit_pets": "pet_preference",
        "ProfileStates:edit_study_location": "study_location",
        "ProfileStates:edit_study_program": "study_program",
        "ProfileStates:edit_telegram_username": "telegram_username"
    }

    api_field = field_mapping.get(current_state)

    if not api_field:
        logger.error(f"No field mapping for state: {current_state}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    if api_field == "age" or api_field == "rent_budget":
        if not value.isdigit():
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            return
        value = int(value)

    if api_field == "cleanliness_level":
        if not value.isdigit() or int(value) < 1 or int(value) > 5:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.")
            return
        value = int(value)

    if api_field == "telegram_username":
        if value.startswith('@'):
            value = value[1:]

    async with postgres_helper.session_factory() as session:
        user = await session.get(User, user_id)
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.")
            return

        setattr(user, api_field, value)

        try:
            await session.commit()
            logger.info(f"Updated user {user.id} field {api_field} to {value}")

            is_onboarding = user_data.get("edit_field") is None

            if is_onboarding:
                if api_field == "age":
                    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=get_gender_keyboard())
                    await state.set_state(ProfileStates.edit_gender)
                    return
                elif api_field == "occupation":
                    await message.answer("–•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –í–£–ó –∏–ª–∏ –≥–æ—Ä–æ–¥, –≥–¥–µ –≤—ã —É—á–∏—Ç–µ—Å—å/–ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —É—á–∏—Ç—å—Å—è:")
                    await state.set_state(ProfileStates.edit_study_location)
                    return
                elif api_field == "study_location":
                    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è:")
                    await state.set_state(ProfileStates.edit_study_program)
                    return
                elif api_field == "study_program":
                    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∂–∏–ª—å—è:",
                                         reply_markup=get_accommodation_keyboard())
                    await state.set_state(ProfileStates.edit_accommodation)
                    return
                elif api_field == "bio":
                    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ü–µ–Ω–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –≤–∞—à–µ–π —á–∏—Å—Ç–æ–ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –æ—Ç 1 –¥–æ 5:")
                    await state.set_state(ProfileStates.edit_cleanliness)
                    return
                elif api_field == "cleanliness_level":
                    await message.answer("–•–æ—Ä–æ—à–æ! –û–ø–∏—à–∏—Ç–µ –≤–∞—à —Ä–µ–∂–∏–º —Å–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∂–∞–≤–æ—Ä–æ–Ω–æ–∫', '—Å–æ–≤–∞'):")
                    await state.set_state(ProfileStates.edit_sleep)
                    return
                elif api_field == "sleep_habits":
                    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç –Ω–∞ –∞—Ä–µ–Ω–¥—É (—á–∏—Å–ª–æ –≤ —Ä—É–±–ª—è—Ö):")
                    await state.set_state(ProfileStates.edit_budget)
                    return
                elif api_field == "rent_budget":
                    await message.answer("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω –ø–æ–∏—Å–∫–∞:")
                    await state.set_state(ProfileStates.edit_location)
                    return
                elif api_field == "location":
                    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –∫—É—Ä–µ–Ω–∏—é:")
                    await state.set_state(ProfileStates.edit_smoking)
                    return
                elif api_field == "smoking_preference":
                    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –¥–æ–º–∞—à–Ω–∏–º –∂–∏–≤–æ—Ç–Ω—ã–º:")
                    await state.set_state(ProfileStates.edit_pets)
                    return
                elif api_field == "pet_preference":
                    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à username –≤ Telegram (–±–µ–∑ @):")
                    await state.set_state(ProfileStates.edit_telegram_username)
                    return
                elif api_field == "telegram_username":
                    await message.answer(
                        "‚úÖ –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å —Å–æ—Å–µ–¥–µ–π.",
                        reply_markup=get_main_menu_keyboard()
                    )
                    await state.clear()
                    return

            await message.answer("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            await show_profile(message, state)
            await state.clear()

        except Exception as e:
            logger.error(f"Error updating user profile: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            await session.rollback()


async def gender_callback(callback: types.CallbackQuery, state: FSMContext):
    gender = callback.data.split("_")[1]

    if gender == "male":
        gender_value = "–ú—É–∂—Å–∫–æ–π"
    elif gender == "female":
        gender_value = "–ñ–µ–Ω—Å–∫–∏–π"
    else:
        gender_value = "–î—Ä—É–≥–æ–π"

    user_data = await state.get_data()
    user_id = user_data.get("user_id")

    async with postgres_helper.session_factory() as session:
        user = await session.get(User, user_id)
        user.gender = gender_value
        await session.commit()

    is_onboarding = user_data.get("edit_field") is None

    if is_onboarding:
        await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ—Ñ–µ—Å—Å–∏—é:")
        await state.set_state(ProfileStates.edit_occupation)
    else:
        await callback.message.answer("‚úÖ –ü–æ–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        await show_profile(callback.message, state)
        await state.clear()

    await callback.answer()


async def accommodation_callback(callback: types.CallbackQuery, state: FSMContext):
    option = callback.data.split("_")[1]

    option_map = {
        "apartment": "apartment",
        "dormitory": "dormitory",
        "no_preference": "no_preference"
    }

    accommodation_value = option_map.get(option)

    user_data = await state.get_data()
    user_id = user_data.get("user_id")

    async with postgres_helper.session_factory() as session:
        user = await session.get(User, user_id)
        user.accommodation_preference = accommodation_value
        await session.commit()

    is_onboarding = user_data.get("edit_field") is None

    if is_onboarding:
        await callback.message.answer("–•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ:")
        await state.set_state(ProfileStates.edit_bio)
    else:
        await callback.message.answer("‚úÖ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –∂–∏–ª—å—é –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        await show_profile(callback.message, state)
        await state.clear()

    await callback.answer()


async def process_interests_edit(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "interests_done":
        user_data = await state.get_data()
        user_id = user_data.get("user_id")
        interests = user_data.get("selected_interests", [])

        async with postgres_helper.session_factory() as session:
            user = await session.get(User, user_id)
            user.interests = interests
            await session.commit()

        await callback.message.answer("‚úÖ –ò–Ω—Ç–µ—Ä–µ—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        await show_profile(callback.message, state)
        await state.clear()
    else:
        interest = callback.data.replace("interest_", "")
        user_data = await state.get_data()
        interests = user_data.get("selected_interests", [])

        if interest in interests:
            interests.remove(interest)
        else:
            interests.append(interest)

        await state.update_data(selected_interests=interests)

        selected_text = ", ".join(interests) if interests else "–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"
        await callback.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã:\n\n–í—ã–±—Ä–∞–Ω–æ: {selected_text}",
            reply_markup=get_interests_keyboard(interests)
        )

    await callback.answer()


def register_profile_handlers(dp):
    dp.include_router(router)

    router.message.register(show_profile, Command("profile"))
    router.callback_query.register(edit_profile_callback, F.data.startswith("edit_"))
    router.callback_query.register(gender_callback, F.data.startswith("gender_"))
    router.callback_query.register(accommodation_callback, F.data.startswith("accommodation_"))
    router.callback_query.register(process_interests_edit, F.data.startswith("interest_"))

    for state in ProfileStates:
        if state not in [ProfileStates.edit_interests, ProfileStates.edit_gender, ProfileStates.edit_accommodation]:
            router.message.register(process_profile_edit, state)