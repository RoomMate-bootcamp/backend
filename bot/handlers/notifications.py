import logging
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, update, text

from src.core.database import User, postgres_helper, Notification
from src.core.database.alchemy_models.notification import NotificationType
from bot.keyboards.main_kb import get_main_menu_keyboard
from bot.keyboards.matches_kb import get_match_actions_keyboard

router = Router()
logger = logging.getLogger(__name__)


async def check_notifications(user_id: int, bot):
    """Check and send pending notifications for a user"""
    try:
        async with postgres_helper.session_factory() as session:
            query = (
                select(Notification)
                .where(
                    (Notification.user_id == user_id) & (Notification.is_read == False)
                )
                .order_by(Notification.timestamp.desc())
            )

            result = await session.execute(query)
            notifications = result.scalars().all()

            if not notifications:
                return

            query = text(
                "SELECT user_metadata->>'telegram_id' AS telegram_id FROM users WHERE id = :user_id"
            )
            result = await session.execute(query, {"user_id": user_id})
            row = result.fetchone()

            if not row or not row[0]:
                logger.warning(
                    f"Cannot send notification: User {user_id} has no Telegram ID"
                )
                return

            telegram_id = row[0]

            for notification in notifications:
                if notification.type == NotificationType.NEW_LIKE:
                    if notification.related_user_id:
                        liker = await session.get(User, notification.related_user_id)
                        if liker:
                            liker_name = liker.name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                            liker_age = f", {liker.age}" if liker.age else ""
                            liker_gender = f", {liker.gender}" if liker.gender else ""
                            liker_info = f"{liker_name}{liker_age}{liker_gender}"
                        else:
                            liker_info = "–ö—Ç–æ-—Ç–æ"
                    else:
                        liker_info = "–ö—Ç–æ-—Ç–æ"

                    message = (
                        f"‚ù§Ô∏è *–£ –≤–∞—Å –Ω–æ–≤—ã–π –ª–∞–π–∫!*\n\n"
                        f"{liker_info} –ø—Ä–æ—è–≤–∏–ª(–∞) –∏–Ω—Ç–µ—Ä–µ—Å –∫ –≤–∞–º!\n\n"
                        f'–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–∫–ª–∞–¥–∫—É "–ú–æ–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è", —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ.'
                    )

                    keyboard = types.InlineKeyboardMarkup(
                        inline_keyboard=[
                            [
                                types.InlineKeyboardButton(
                                    text="üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è",
                                    callback_data="show_matches",
                                )
                            ]
                        ]
                    )

                elif notification.type == NotificationType.MATCH_CREATED:
                    if notification.related_user_id:
                        partner = await session.get(User, notification.related_user_id)
                        if partner:
                            partner_name = partner.name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                            partner_age = f", {partner.age}" if partner.age else ""
                            partner_gender = (
                                f", {partner.gender}" if partner.gender else ""
                            )
                            partner_info = (
                                f"{partner_name}{partner_age}{partner_gender}"
                            )
                        else:
                            partner_info = "–ö—Ç–æ-—Ç–æ"
                    else:
                        partner_info = "–ö—Ç–æ-—Ç–æ"

                    message = (
                        f"‚ú® *–£ –≤–∞—Å –Ω–æ–≤–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ!*\n\n"
                        f"–í—ã –∏ {partner_info} –ø—Ä–æ—è–≤–∏–ª–∏ –≤–∑–∞–∏–º–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å –¥—Ä—É–≥ –∫ –¥—Ä—É–≥—É!\n"
                        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ –∏ –æ–±—Å—É–¥–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π –∞—Ä–µ–Ω–¥—ã –∂–∏–ª—å—è."
                    )

                    keyboard = types.InlineKeyboardMarkup(
                        inline_keyboard=[
                            [
                                types.InlineKeyboardButton(
                                    text="üí¨ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è",
                                    callback_data="show_matches",
                                )
                            ]
                        ]
                    )

                else:
                    message = notification.content
                    keyboard = get_main_menu_keyboard()

                try:
                    await bot.send_message(
                        chat_id=telegram_id,
                        text=message,
                        reply_markup=keyboard,
                        parse_mode="Markdown",
                    )

                    notification.is_read = True
                except Exception as e:
                    logger.error(f"Failed to send notification to {telegram_id}: {e}")

            if notifications:
                await session.commit()
                logger.info(
                    f"Sent {len(notifications)} notifications to user {user_id}"
                )

    except Exception as e:
        logger.error(f"Error in check_notifications: {e}")


async def show_notification_list(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    user_id = user_data.get("user_id")

    if not user_id:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º."
        )
        return

    async with postgres_helper.session_factory() as session:
        query = (
            select(Notification)
            .where(Notification.user_id == user_id)
            .order_by(Notification.timestamp.desc())
            .limit(10)
        )

        result = await session.execute(query)
        notifications = result.scalars().all()

        if not notifications:
            await message.answer(
                "–£ –≤–∞—Å –Ω–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.", reply_markup=get_main_menu_keyboard()
            )
            return

        notification_text = "üì¨ *–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:*\n\n"

        for i, notification in enumerate(notifications, 1):
            if notification.type == NotificationType.NEW_LIKE:
                type_text = "‚ù§Ô∏è –ù–æ–≤—ã–π –ª–∞–π–∫"
            elif notification.type == NotificationType.MATCH_CREATED:
                type_text = "‚ú® –ù–æ–≤–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ"
            else:
                type_text = "üìù –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"

            timestamp = notification.timestamp.strftime("%d.%m.%Y %H:%M")

            status = "üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ" if notification.is_read else "üÜï –ù–æ–≤–æ–µ"

            notification_text += (
                f"{i}. {type_text} - {timestamp} ({status})\n{notification.content}\n\n"
            )

        await message.answer(
            notification_text,
            reply_markup=get_main_menu_keyboard(),
            parse_mode="Markdown",
        )


def register_notifications_handlers(dp):
    dp.include_router(router)

    router.message.register(show_notification_list, Command("notifications"))
