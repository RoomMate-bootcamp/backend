from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy import select

from src.core.database import User, postgres_helper
from src.core.utils.AIMatchingService import ai_matching_service
from bot.states.ai_chat_states import AIChatState
from yandex_cloud_ml_sdk import YCloudML
from bot.config import YANDEX_FOLDER_ID, YANDEX_API_KEY

router = Router()

# Initialize YandexGPT
sdk = YCloudML(
    folder_id=YANDEX_FOLDER_ID,
    auth=YANDEX_API_KEY
)
model = sdk.models.completions('yandexgpt-lite')
model.configure(
    temperature=0.5,
    max_tokens=2000,
)


async def start_ai_chat(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    user_id = user_data.get("user_id")

    if not user_id:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
        return

    await message.answer(
        "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –±—ã—Ç–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–∞–º. "
        "–ú–æ–≥—É –ø–æ–º–æ—á—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞, —É–±–æ—Ä–∫–æ–π, –≥–æ—Ç–æ–≤–∫–æ–π, "
        "—Ä–µ—à–µ–Ω–∏–µ–º –±—ã—Ç–æ–≤—ã—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏ –º–Ω–æ–≥–∏–º –¥—Ä—É–≥–∏–º. –ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω—è –æ —á–µ–º —É–≥–æ–¥–Ω–æ!"
    )

    await state.set_state(AIChatState.chatting)


async def process_ai_query(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state != "AIChatState:chatting":
        return

    user_data = await state.get_data()
    user_id = user_data.get("user_id")

    if not user_id:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
        return

    # Get user profile for context
    async with postgres_helper.session_factory() as session:
        user = await session.get(User, user_id)
        if not user:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        # Create profile context
        user_profile = {
            "name": user.name,
            "age": user.age,
            "gender": user.gender,
            "cleanliness_level": user.cleanliness_level,
            "sleep_habits": user.sleep_habits,
            "smoking_preference": user.smoking_preference,
            "pet_preference": user.pet_preference,
            "interests": user.interests or []
        }

    query = message.text

    # Show typing indicator
    await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")

    # Get AI response
    response = await get_ai_response(query, user_profile)

    await message.answer(response)


async def get_ai_response(query: str, user_profile):
    system_prompt = """
    –¢—ã - –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –±—ã—Ç–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –¥–ª—è —Å–æ—Å–µ–¥–µ–π –ø–æ –∫–≤–∞—Ä—Ç–∏—Ä–µ.
    –¢—ã –ø–æ–º–æ–≥–∞–µ—à—å —Å —Ä–µ—à–µ–Ω–∏–µ–º –±—ã—Ç–æ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞, —É–±–æ—Ä–∫–æ–π, 
    –≥–æ—Ç–æ–≤–∫–æ–π, —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –º–µ–∂–¥—É —Å–æ—Å–µ–¥—è–º–∏ –ø–æ –∫–≤–∞—Ä—Ç–∏—Ä–µ –∏ –¥—Ä—É–≥–∏–º–∏ –¥–æ–º–∞—à–Ω–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏.
    –í—Å–µ–≥–¥–∞ –¥–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã —Å —É—á–µ—Ç–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
    """

    user_context = ""
    if user_profile:
        user_context = f"""
        –í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:
        - –ò–º—è: {user_profile.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
        - –í–æ–∑—Ä–∞—Å—Ç: {user_profile.get('age', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
        - –ü–æ–ª: {user_profile.get('gender', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
        - –ß–∏—Å—Ç–æ–ø–ª–æ—Ç–Ω–æ—Å—Ç—å (1-5): {user_profile.get('cleanliness_level', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
        - –†–µ–∂–∏–º —Å–Ω–∞: {user_profile.get('sleep_habits', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
        - –û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –∫—É—Ä–µ–Ω–∏—é: {user_profile.get('smoking_preference', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
        - –û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –∂–∏–≤–æ—Ç–Ω—ã–º: {user_profile.get('pet_preference', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
        - –ò–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(user_profile.get('interests', ['–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ']))}

        –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —á—Ç–æ–±—ã –¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–æ–≤–µ—Ç.
        """

    user_prompt = f"{user_context}\n\n–í–æ–ø—Ä–æ—Å: {query}"

    messages = [
        {'role': 'system', 'text': system_prompt},
        {'role': 'user', 'text': user_prompt},
    ]

    try:
        operation = model.run_deferred(messages)
        result = operation.wait()
        return result.text
    except Exception as e:
        return f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"


def register_ai_chat_handlers(dp):
    dp.include_router(router)

    router.message.register(start_ai_chat, Command("ai_chat"))
    router.message.register(process_ai_query, AIChatState.chatting)
