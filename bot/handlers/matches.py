from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, or_

from bot.keyboards.matches_kb import get_matches_keyboard, get_match_actions_keyboard
from src.core.database import User, postgres_helper, Match

router = Router()


async def show_matches(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    user_id = user_data.get("user_id")

    if not user_id:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
        return

    async with postgres_helper.session_factory() as session:
        query = select(Match).where(
            or_(
                Match.user1_id == user_id,
                Match.user2_id == user_id
            )
        )
        result = await session.execute(query)
        matches = result.scalars().all()

        matches_data = []
        for match in matches:
            other_id = match.user2_id if match.user1_id == user_id else match.user1_id
            other_user = await session.get(User, other_id)

            if other_user:
                matches_data.append({
                    "id": match.id,
                    "timestamp": match.timestamp,
                    "roommate": {
                        "id": other_user.id,
                        "name": other_user.name,
                        "username": other_user.username
                    }
                })

    if not matches_data:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /search, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ—Å–µ–¥–µ–π.")
        return

    await message.answer("üîÑ –í–∞—à–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è:", reply_markup=get_matches_keyboard(matches_data))


async def show_match_details(callback: types.CallbackQuery, state: FSMContext):
    match_id = int(callback.data.split("_")[1])
    user_data = await state.get_data()
    user_id = user_data.get("user_id")

    async with postgres_helper.session_factory() as session:
        match = await session.get(Match, match_id)

        if not match:
            await callback.message.answer("–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await callback.answer()
            return

        other_id = match.user2_id if match.user1_id == user_id else match.user1_id
        roommate = await session.get(User, other_id)

        if not roommate:
            await callback.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await callback.answer()
            return

        profile_text = (
            f"üë• *–í–∞—à–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ*\n\n"
            f"*–ò–º—è:* {roommate.name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"*–í–æ–∑—Ä–∞—Å—Ç:* {roommate.age or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"*–ü–æ–ª:* {roommate.gender or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"*–ü—Ä–æ—Ñ–µ—Å—Å–∏—è:* {roommate.occupation or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"*–£—Ä–æ–≤–µ–Ω—å —á–∏—Å—Ç–æ–ø–ª–æ—Ç–Ω–æ—Å—Ç–∏:* {roommate.cleanliness_level or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}/5\n"
            f"*–†–µ–∂–∏–º —Å–Ω–∞:* {roommate.sleep_habits or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"*–ë—é–¥–∂–µ—Ç –Ω–∞ –∞—Ä–µ–Ω–¥—É:* {roommate.rent_budget or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} ‚ÇΩ\n"
            f"*–†–∞–π–æ–Ω –ø–æ–∏—Å–∫–∞:* {roommate.location or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"*–û —Å–µ–±–µ:*\n{roommate.bio or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
            f"*–ò–Ω—Ç–µ—Ä–µ—Å—ã:*\n{', '.join(roommate.interests or ['–ù–µ —É–∫–∞–∑–∞–Ω–æ'])}"
        )

        await callback.message.answer(profile_text, reply_markup=get_match_actions_keyboard(match_id))

    await callback.answer()


async def delete_match(callback: types.CallbackQuery, state: FSMContext):
    match_id = int(callback.data.split("_")[1])
    user_data = await state.get_data()
    user_id = user_data.get("user_id")

    async with postgres_helper.session_factory() as session:
        match = await session.get(Match, match_id)

        if not match:
            await callback.message.answer("–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await callback.answer()
            return

        if match.user1_id != user_id and match.user2_id != user_id:
            await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è.")
            await callback.answer()
            return

        await session.delete(match)
        await session.commit()

        await callback.message.answer("‚úÖ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
        await show_matches(callback.message, state)

    await callback.answer()


def register_matches_handlers(dp):
    dp.include_router(router)

    router.message.register(show_matches, Command("matches"))
    router.callback_query.register(show_match_details, F.data.startswith("match_"))
    router.callback_query.register(delete_match, F.data.startswith("delete_match_"))
    router.callback_query.register(back_to_matches_callback, F.data == "back_to_matches")


async def back_to_matches_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await show_matches(callback.message, state)
